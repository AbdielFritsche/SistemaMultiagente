import agentpy as ap

class Cell:
    def __init__(self, cell_type, position):
        self.cell_type = cell_type  # 'road', 'sidewalk', 'obstacle', 'intersection'
        self.position = position
        self.occupied_by = None

    def is_occupied(self):
        return self.occupied_by is not None

    def occupy(self, agent):
        self.occupied_by = agent

    def free(self):
        self.occupied_by = None


class Grid(ap.Space):
    def __init__(self, model, width, height):
        super().__init__(model, shape=(width, height), torus=False)
        self.cells = [[Cell(cell_type="road", position=(x, y))
                      for y in range(height)] for x in range(width)]

    def set_sidewalk(self, positions):
        """Define las celdas que serán banquetas."""
        for pos in positions:
            x, y = pos
            self.cells[x][y].cell_type = "sidewalk"

    def set_obstacles(self, positions):
        """Define las celdas que serán obstáculos."""
        for pos in positions:
            x, y = pos
            self.cells[x][y].cell_type = "obstacle"

    def set_intersections(self, positions):
        """Define las celdas que serán intersecciones."""
        for pos in positions:
            x, y = pos
            self.cells[x][y].cell_type = "intersection"

    def is_walkable(self, position):
        """Chequea si una celda es transitable para peatones."""
        x, y = position
        return self.cells[x][y].cell_type in ["sidewalk", "intersection"]

    def is_driveable(self, position):
        """Chequea si una celda es transitable para vehículos."""
        x, y = position
        return self.cells[x][y].cell_type in ["road", "intersection"]